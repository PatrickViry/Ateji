/****************************
 * Copyright (c) 2009 ATEJI *
 * All rights reserved.     *
 ****************************/
package com.ateji.px.channels;

import java.util.Timer;
import java.util.TimerTask;

import apx.lang.AsyncChan;
import apx.lang.Chan;
import apx.lang.IChan;
import apx.lang.Signal;

/**
 * This example shows some differences between synchronous channels and
 * asynchronous channels.
 * 
 * Running the main method will display the result of the comparison.
 */
public class SynchronousOrAsynchronous {

	/**
	 * Two parallel branches sends and then receives a message on the same
	 * channel.
	 * Using a synchronous channel, both branches will block on the sending
	 * because there will be nobody to receive the message.
	 * Using an asynchronous channel, both branches can send messages without
	 * blocking (the messages will be buffered) and then proceed to the
	 * receiving.
	 *
	 * The last branch is used to get out of a deadlock situation; after three
	 * seconds a signal is sent suggesting that the situation will no longer
	 * advance: there is a deadlock.
	 * 
	 * Both synchronous and asynchronous channels implements the same interface
	 * IChan: as a result this method can work on any channel 'c', be
	 * synchronous or asynchronous.
	 */
	@SuppressWarnings("unused")
	private static void showDeadLock(IChan<Integer> c) throws DeadlockException
	{
		[
			|| 
			c ! 0; c ? int v;
			return; 
			
			|| 
			c ! 1; c ? int v;
			return;
			
			||
			deadlockSignal ?;
			throw new DeadlockException();
		]	
	}


	public static void main(String[] args) {
		IChan<Integer> synchronous = new Chan<Integer>();
		IChan<Integer> asynchronous = new AsyncChan<Integer>();

		System.out.println(
				"DEFINITION\n" +
				"\n" +
				"Synchronous channels have the property that a sender putting a message in the\n" +
				"channel MUST WAIT for a receiver to get the message out of the channel before\n" +
				"the sender can proceed.\n" +
				"\n" +
				"Asynchronous channels have the property that a sender putting a message in the\n" +
				"channel NEED NOT WAIT for a receiver to get the message out of the channel.\n" +
				"\n");				
		
		System.out.println(
				"DEAD LOCK\n" +
				"\n" +
				"In this example, some problematic message exchange is run: two parallel branches\n" +
				"sends and then receives a message on the same channel.\n" +
				"Using a synchronous channel, both branches will block on the sending because\n" +
				"there will be nobody ready to receive the message.\n" +
				"Using an asynchronous channel, both branches can send messages without blocking\n" +
				"(the messages will be buffered) and then proceed to the receiving.\n" +
				"The example considers that there is a deadlock if the message exchange is still\n" +
				"not done after three seconds.\n" +
				"\n" +
				"Does a synchronous chanel cause a dead lock? ");
		System.out.println(causeDeadLock(synchronous));
		System.out.println(
				"Does a asynchronous chanel cause a dead lock? ");
		System.out.println(causeDeadLock(asynchronous));
	}
	
	private static final Signal deadlockSignal = new Signal();
	
	private static String causeDeadLock(IChan<Integer> c) 
	{
		try {
			[
			 	||
			 	showDeadLock(c);
			 	return "exit on message exchange";
			 	
			 	||
			 	deadlockSignal(deadlockSignal);
			]
		} catch(DeadlockException e) {
			return "exit on dead lock";
		}
	}
	
	private static class DeadlockException extends Exception
	{
		private static final long serialVersionUID = -1875415094015286001L;
	}
	
	/**
	 *  After 3000 ms, notify on 'deadlockSignal' that a dead lock probably
	 *  occurred.
	 *  Every 100 ms before this notification, a dot is printed on the console
	 *  to notify the reader that the timer is waiting for deadlock.
	 */
	private static void deadlockSignal(final Signal deadlockSignal) 
	{
		final int end = 3000;
		final int interval = 100;
		Timer timer = new Timer();
		for (final int i : end/interval){
			timer.schedule(new TimerTask(){
				@Override
				public void run() {
					System.out.print(".");
				}
			}, i*interval);
		}
		timer.schedule(new TimerTask(){
			@Override
			public void run() {				
				deadlockSignal !;
			}
		}, end);
	}
	
}
