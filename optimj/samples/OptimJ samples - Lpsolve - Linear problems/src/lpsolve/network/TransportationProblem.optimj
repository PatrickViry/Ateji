/****************************
 * Copyright (c) 2008 ATEJI *
 * All rights reserved.     *
 ****************************/
package lpsolve.network;

import java.util.Set;
import java.util.HashSet;
import static com.ateji.monoid.Monoids.*;

/**
 * Three factories can supply any of six customers with a particular product. The demand for this product from each 
 * of the customers 0, 1, 2, 3, 4 and 5 is 40, 35, 25, 20, 60 and 30 tons respectively. Maximum production at factories
 * A, B and C is 60, 70 and 80 tons respectively. The variable production cost per ton is 11.3, 11.0 and 10.8 ($)
 * at factories A, B and C respectively and the transportation cost per ton from each factory to each customer is as
 * shown below.
 *
 *                Transportation cost ($) 
 *                per ton to customer
 *                0   1   2   3   4   5
 * From factory A 1.5 1.8 3.1 4.2 2.5 3.0
 *              B 2.2 4.6 3.5 2.4 1.8 4.0
 *              C 3.6 4.8 1.6 4.4 2.8 2.0
 *
 * Determine the quantity of product to be supplied from each factory to each customer so as to minimise total costs.
 *
 * In order to treat this problem as a minimum cost network flow problem we need first to find the cost for each 
 * factory/customer pair of producing and transporting one ton from the factory to the customer. These costs are 
 * obtained by adding the variable production costs to the transportation costs and are tabulated below.
 *
 *               Production and transportation 
 *               cost ($) per ton to customer
 *                0    1    2    3    4    5
 * From factory A 12.8 13.1 14.4 15.5 13.8 14.3
 *              B 13.2 15.6 14.5 13.4 12.8 15.0
 *              C 14.4 15.6 12.4 15.2 13.6 12.8
 *
 * It is now clear that this problem can be viewed as a minimum cost network flow problem as below where:
 *
 * each source (factory) can supply as much as the factory can produce
 * each sink (customer) has demand equal to the associated customer demand
 * each arc has a capacity equal to the demand of the customer it goes to and a cost taken from the table 
 * above of combined production and transportation costs.
 * 
 *
 */
public class TransportationProblem {
	
	//	 Nodes
	static Factory A = {"A", 60}, B = {"B", 70}, C = {"C",80} ;
	static Customer C0 = {0, 40}, C1 = {1, 35}, C2 = {2, 25}, C3 = {3, 20}, C4 = {4, 60}, C5 = {5, 30}; 

	static double [Customer] [Factory] cost = 
	{
			A -> {C0 -> 12.8, C1 -> 13.1, C2 -> 14.4, C3 -> 15.5, C4 -> 13.8, C5 -> 14.3},
			B -> {C0 -> 13.2, C1 -> 15.6, C2 -> 14.5, C3 -> 13.4, C4 -> 12.8, C5 -> 15.0},
			C -> {C0 -> 14.4, C1 -> 15.6, C2 -> 12.4, C3 -> 15.2, C4 -> 13.6, C5 -> 12.8}
	};

	static HashSet<Customer> customers = {C0, C1, C2, C3, C4, C5};
	static HashSet<Factory> factories = {A, B, C};
	static HashSet<Node> nodes = {A, B, C, C0, C2, C3, C4, C5};				

	static Set<Arc> arcs = `hashSet(){Customer c : customers, Factory f : factories}{new Arc(f, c, cost[f][c], -c.b)};
	
	static Network data = new Network(nodes,arcs);
	
	public static void main(String [] args)
	{	
		com.ateji.optimj.lpsolvelib.LibraryLoader.load();		


		// Solution:
		// From A to 0: 25.0 tons
		// From A to 1: 35.0 tons
		// From B to 0: 15.0 tons
		// From B to 3: 20.0 tons
		// From B to 4: 35.0 tons
		// From C to 2: 25.0 tons
		// From C to 4: 25.0 tons
		// From C to 5: 30.0 tons

		// total cost: 2726.5

		MinimumCostNetworkFlows problem = new MinimumCostNetworkFlows(data);
		try
		{
			problem.extract();
			if(problem.solve()){
				for(Arc a : arcs)
				{
					if(problem.valueDouble(problem.x[a]) > 0)
					{
						System.out.println("From "+a.from+" to "+a.to+": "+problem.value(problem.x[a])+" tons");
					}
				}				
				System.out.println("total cost: "+problem.objValue());
			}
			else
			{
				System.out.println("no solution.");
			}
		}
		finally
		{
			problem.dispose();
		}
	}
	
}

class Factory extends Node {
	// net flow generated at a factory: production
	Factory(String id, double production){super(id, production);}

}
class Customer extends Node {
	// net flow generated at a customer: -demand
	Customer(int id,double demand){super(""+id, -demand);}

}
